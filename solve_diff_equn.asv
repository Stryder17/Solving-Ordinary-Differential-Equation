% Solving Ordinary Differential Equations using the ode45 solver
% Manjul Regmi

clc; clear; close all;

% % Simple Pendulum
% m = 10;
% b = 0.1;
% k = 100;
% t_span = [0 5];
% x0 = [1 0];
% [t,x] = ode45(@(t,x)simplePendulum(t,x,m,b,k), t_span, x0);
% 
% figure
% plot(t,x)
% clear;

% Solve Lyapunov equation
A = [0 1; 0 0];
B = [0; 1];
C = [1 0; 0 1];
D= 0;

% Initial condition
x0 = [-5; 1];

% Time discretization
T = 5;                  % Final time
t = 0:0.01:T;

n = length(A);
Q = [1 0; 0 1];
R = 2;
S_T = [0 0; 0 0];

% ode45 can only integrate vectors and can't integrate matrices.
% Convert final state S matrix to vector
% Since S(1,2) and S(2,1) are same. We can use only one of them.

Sv_T = [S_T(1,1); S_T(1,2); S_T(2,2)];
[t1, Sv] = ode45(@(t,S)Lyapunov(t,S,A,B,Q,R), [T 0], Sv_T);
%[t, Sv] = ode45(@(t,S)Ricatti(t,S,A,B,Q,R), [T 0], Sv_T);

% Flipping the time-span in ode45 does integrate the equation backwards but
% the time and vector will also be in that order T to 0.
% So flip the vectors to arrange it forward in time
% t = flipud(t);
% Sv = flipud(Sv);

% Convert the vectors to matrices
N = length(t1);
S = zeros(n,n,N);
K = zeros(N,n);             % Do we need to calculate kalman gains for all steps? Is the dimension of K correct?
for i = 1:N
    S(1,1,i) = Sv(i,1);
    S(1,2,i) = Sv(i,2);
    S(2,1,i) = Sv(i,2);
    S(2,2,i) = Sv(i,3);

    K(i,:) = inv(R)*B'*S(:,:,i);
end

G_T = S(:,:,length(t1));

% Fixed final state and Open loop control
x_T = [10; 1];                      % Final state
% Obtain optimal control sequence
u = zeros(N,1);
for k = 1:N
    u(k)=inv(R) * B' * expm(A'*(T-t(k))) *inv(G_T) * (x_T - expm(A*T)*x0);
end
% Obtain state trajectory
sys = ss(A,B,C,D);
[x, t] = lsim(sys,u,t,x0);      % Simulate system with optimal control
figure
plot(t,x)
xlabel('Time (s)')
ylabel('State trajectory')

% Plot results
figure
plot(t,Sv(:,1))
hold on
plot(t,Sv(:,2))
hold on
plot(t,Sv(:,3))
title('Performance Kernels')

figure
plot(t,K(:,1))
hold on
plot(t,K(:,2))
title('Kalman Gains')


%--------------------------------------------------------%
% Functions
function SDotv = Lyapunov(t,Sv,A,B,Q,R)
    S = [Sv(1) Sv(2); Sv(2) Sv(3)];
    SDot = -(A*S + S*A' + B*inv(R)*B');
    SDotv = [SDot(1,1); SDot(1,2); SDot(2,2)];
end

function SDotv = Ricatti(t,Sv,A,B,Q,R)
    S = [Sv(1) Sv(2); Sv(2) Sv(3)];
    SDot = A'*S+S*A-S*B*inv(R)*B'*S+Q;
    SDotv = [SDot(1,1); SDot(1,2); SDot(2,2)];
end
